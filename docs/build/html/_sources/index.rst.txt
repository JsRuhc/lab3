.. Mr.Lan Lab2 documentation master file, created by
   sphinx-quickstart on Wed Dec 15 22:35:26 2021.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to Mr.Lan Lab3's documentation!
=======================================

.. toctree::
   :maxdepth: 2
   :caption: Contents:

**小组成员**

夏金明 - 201832110145 - 736001469@qq.com

邱政淞 - 201932110132 - 1712590429@qq.com

方世玉 - 201932110117 - 874524395@qq.com



**项目GitHub地址**: `ORM`_.

.. _ORM: https://github.com/reallyQ/Lab3




Abstract
=================================================

1 Dependency inversion.

2 Map a class to a database table using SQLAlchemy’s ORM 

3 Test-driven development (TDD).


Introduction
=================================================

Understand dependency inversion.

Map a class to a database table using SQLAlchemy’s ORM (object-relational mapper).

Implement a service layer for a user to read an article.

Practice Test-driven development (TDD).

Complete orm.py and services.py such that running the following command could make all the five test cases defined in test services.py 

pass: pytest -v -s test services.py. 

Methods and materials
=================================================

python 3.7.3

orm.py   model.py repository.py  services.py    conftest.py    test services.py


code
=================================================



**model.py**      add a class , called **Reading**
::
      # Software Architecture and Design Patterns -- Lab 3 starter code
      # Copyright (C) 2021 Hui Lan

      from dataclasses import dataclass


      @dataclass
      class Article:
         article_id:int
         text:str
         source:str
         date:str
         level:int
         question:str

      class Reading:
         def __init__(self, username, article_id):
            self.username = username
            self.article_id = article_id


      class NewWord:
         def __init__(self, username, word='', date='yyyy-mm-dd'):
            self.username = username
            self.word = word
            self.date = date


      class User:
         def __init__(self, username, password='12345', start_date='2021-05-19', expiry_date='2031-05-19'):
            self.username = username
            self.password = password
            self.start_date = start_date
            self.expiry_date = expiry_date
            self._read = []

         def read_article(self, article):
            self._read.append(article)
            return article.article_id




**orm.py**     Map the database
::
   # Software Architecture and Design Patterns -- Lab 3 starter code
   # Copyright (C) 2021 Hui Lan

   from sqlalchemy import Table, MetaData, Column, Integer, String, Date, ForeignKey
   from sqlalchemy.orm import mapper, relationship

   import model

   from sqlalchemy import create_engine
   from sqlalchemy import Table, MetaData, Column, Integer, String, Date, ForeignKey
   from sqlalchemy.orm import mapper, relationship, sessionmaker, clear_mappers

   metadata = MetaData()

   articles = Table(
      'articles',
      metadata,
      Column('article_id', Integer, primary_key=True, autoincrement=True),
      Column('text', String(10000)),
      Column('source', String(100)),
      Column('date', String(10)),
      Column('level', Integer, nullable=False),
      Column('question', String(1000)),
      )


   users = Table(
      'users',
      metadata,
      Column('username', String(100), primary_key=True),
      Column('password', String(64)),
      Column('start_date', String(10), nullable=False),
      Column('expiry_date', String(10), nullable=False),
      )

   newwords = Table(
      'newwords',
      metadata,
      Column('word_id', Integer, primary_key=True, autoincrement=True),
      Column('username', String(100), ForeignKey('users.username')),
      Column('word', String(20)),
      Column('date', String(10)),
      )

   readings = Table(
      'readings',
      metadata,
      Column('id', Integer, primary_key=True, autoincrement=True),
      Column('username', String(100), ForeignKey('users.username')),
      Column('article_id', Integer, ForeignKey('articles.article_id')),
      )

   # map model's classes to database tables
   def start_mappers():
      metadata.create_all(create_engine('sqlite:///EnglishPalDatabase.db'))
      mapper(model.User, users)
      mapper(model.NewWord, newwords)
      mapper(model.Article, articles)
      mapper(model.Reading, readings)



**services.py**  service Layer
::
      # Software Architecture and Design Patterns -- Lab 3 starter code
      # An implementation of the Service Layer
      # Copyright (C) 2021 Hui Lan


      # word and its difficulty level
      WORD_DIFFICULTY_LEVEL = {'starbucks':5, 'luckin':4, 'secondcup':4, 'costa':3, 'timhortons':3, 'frappuccino':6}


      import pytest
      import math
      import model

      # two custom exception classes
      class UnknownUser(Exception):
         pass

      class NoArticleMatched(Exception):
         pass

      def read(user, user_repo, article_repo, session):

         #接受信息
         u = user_repo.get(user.username)
         
         # 判断用户密码是否正确
         if u == None or u.password != user.password:
            raise UnknownUser()

         # 搜索 用户表中的 生词
         words = session.execute(
            'SELECT word FROM newwords WHERE username=:username',
            dict(username=user.username),
         )

         # 计算用户生词水平
         sum = 0
         count = 0
         for word in words:
            sum += WORD_DIFFICULTY_LEVEL[word[0]]
            count += 1
         
         if count == 0:
            count = 1

         average = round(sum / count) + 1
         if average < 3:
            average = 3

         
         # 获取文章
         articles = article_repo.list()
         if articles == None:
            raise NoArticleMatched()


         
         # 根据用户生词水平推荐文章
         for article in articles:
            if average == article.level:
                  article_id  = user.read_article(article)
                  session.add(model.Reading(username = user.username, article_id = article_id))
                  session.commit()
                  return article_id

         raise NoArticleMatched()





References
=================================================

[1] Day 3 - 编写ORM - 廖雪峰的官方网站 https://www.liaoxuefeng.com/wiki/1016959663602400/1018490605531840

[2] Python Dependency Inversion Principle https://www.pythontutorial.net/python-oop/python-dependency-inversion-principle/

[3] 测试驱动开发- 维基百科，自由的百科全书 https://zh.wikipedia.org/wiki/%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91

[2] started-with-sphinx https://docs.readthedocs.io/en/stable/intro/getting-started-with-sphinx.html

[3] Read the docs 环境搭建  https://blog.csdn.net/u010386121/article/details/83274964?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163957890116780274182682%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163957890116780274182682&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-9-83274964.pc_search_insert_es_download&utm_term=read+the+docs

